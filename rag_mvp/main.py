from streamlit_float import *
import streamlit as st
from dotenv import load_dotenv
import os
import getpass

from components.sidebar import sidebar
from ui import (
    is_query_valid,
    is_file_valid,
    display_file_read_error,
)
from core.parsing import read_file
from core.chunking import chunk_file
from core.embedding import embed_files
from core.qa import query_folder
from core.utils import get_llm


load_dotenv()

EMBEDDING = "mistral"
EMBED_MODEL = "mistral-embed"
VECTOR_STORE = "faiss"
MODEL_LIST = ["mistral-large-latest", "mistral-small-latest"]
MAX_LINES = 100


def create_folder_index(files_var, embedding, vector_store):
    with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è‚è≥"):
        try:
            folder_index_local = embed_files(
                files=files_var,
                embedding=embedding,
                vector_store=vector_store,
                model=EMBED_MODEL,
            )
        except Exception as e:
            st.error(
                f"–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –í–µ—Ä–æ—è—Ç–Ω–æ, –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∫–æ–¥–∏—Ä–æ–≤–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª.")
            print("!!!–í–û–ó–ù–ò–ö–õ–ê –û–®–ò–ë–ö–ê –ü–†–ò –ò–ù–î–ï–ö–°–ê–¶–ò–ò!!!\n–û–®–ò–ë–ö–ê:", e)
            folder_index_local = None

    if folder_index_local is None:
        st.stop()
    st.session_state.files = [file.id for file in files_var]
    st.session_state.folder_index = folder_index_local
    return folder_index_local


def chunk_files_func(files_var, chunk_size, chunk_overlap):
    chunked_files_local = []
    for file in files_var:
        chunked_file = chunk_file(file, chunk_size=chunk_size, chunk_overlap=chunk_overlap)
        chunked_files_local.append(chunked_file)
    return chunked_files_local

def read_files_func(uploaded_files_var):
    files_local = []
    for file in uploaded_files_var:
        try:
            files_local.append(read_file(file))
        except Exception as e:
            display_file_read_error(e, file_name=file.name)
    return files_local

def upload_and_settings():
    uploaded_files = st.file_uploader(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã",
        type=["pdf", "docx", "txt", "xlsx", "pptx"],
        help="–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è.",
        accept_multiple_files=True,
    )

    if len(uploaded_files) > MAX_LINES:
        st.warning(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤. –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ {MAX_LINES} –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.")
        multiple_files = uploaded_files[:MAX_LINES]

    with st.expander("–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"):
        return_all_chunks = st.checkbox("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏",
                                        help="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—Å–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –∏–∑ –≤–∞—à–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞. (–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ ChatBot)")

        option = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞",
            ["–ü–æ–∏—Å–∫ —Å–º—ã—Å–ª–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –≤—ã—è–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π",
             "–ü–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –∞–Ω–∞–ª–∏–∑ —Ñ–∞–∫—Ç–æ–≤/–¥–∞–Ω–Ω—ã—Ö"],
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞",
            help="–ü–æ–∏—Å–∫ —Å–º—ã—Å–ª–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª–µ–∑–µ–Ω, –∫–æ–≥–¥–∞ –≤–∞–º –Ω—É–∂–Ω–æ –ø–æ–Ω—è—Ç—å, –æ —á–µ–º –∏–¥–µ—Ç —Ä–µ—á—å –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö. –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª–µ–∑–µ–Ω, –∫–æ–≥–¥–∞ –≤–∞–º –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö.",
        )

        model_option = st.selectbox(
            "–ú–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞",
            options=["–ë–æ–ª—å—à–∞—è –º–æ–¥–µ–ª—å (—Ç–æ—á–Ω–µ–µ –æ—Ç–≤–µ—Ç—ã)", "–ú–∞–ª–µ–Ω—å–∫–∞—è –º–æ–¥–µ–ª—å (–±—ã—Å—Ç—Ä–µ–µ)"],
            help="–ë–æ–ª—å—à–∞—è –º–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã, –Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –º–µ–¥–ª–µ–Ω–Ω–µ–µ. –ú–∞–ª–µ–Ω—å–∫–∞—è –º–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–µ–Ω–µ–µ —Ç–æ—á–Ω—ã–µ –∏ –∫—Ä–∞—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã, –Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –±—ã—Å—Ç—Ä–µ–µ.",
        )

        if model_option == "–ë–æ–ª—å—à–∞—è –º–æ–¥–µ–ª—å (—Ç–æ—á–Ω–µ–µ –æ—Ç–≤–µ—Ç—ã)":
            model = MODEL_LIST[0]
        elif model_option == "–ú–∞–ª–µ–Ω—å–∫–∞—è –º–æ–¥–µ–ª—å (–±—ã—Å—Ç—Ä–µ–µ)":
            model = MODEL_LIST[1]
        else:
            model = MODEL_LIST[0]

        if option == "–ü–æ–∏—Å–∫ —Å–º—ã—Å–ª–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –≤—ã—è–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π":
            chunk_size_input = 1000
            chunk_overlap_input = 400
            num_chunks = 5
        elif option == "–ü–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –∞–Ω–∞–ª–∏–∑ —Ñ–∞–∫—Ç–æ–≤/–¥–∞–Ω–Ω—ã—Ö":
            chunk_size_input = 500
            chunk_overlap_input = 100
            num_chunks = 10
        else:
            chunk_size_input = 1000
            chunk_overlap_input = 400
            num_chunks = 5

        show_full_doc = False

    return uploaded_files, return_all_chunks, option, model, chunk_size_input, chunk_overlap_input, num_chunks, show_full_doc

if "MISTRAL_API_KEY" not in os.environ:
    os.environ["MISTRAL_API_KEY"] = getpass.getpass("Enter your Mistral API key: ")

st.set_page_config(page_title="RAG_MVP", page_icon="üîç", layout="wide")
# Remove whitespace from the top of the page and sidebar
st.markdown("""
        <style>
               .block-container {
                    padding-top: 3rem;
                    padding-bottom: 5rem;
                    padding-left: 5rem;
                    padding-right: 5rem;
                }
        </style>
        """, unsafe_allow_html=True)

hide_default_format = """
       <style>
       #MainMenu {visibility: hidden; }
       footer {visibility: hidden;}
       </style>
       """

metrika = """
<!-- Yandex.Metrika counter -->
<script type="text/javascript" >
   (function(m,e,t,r,i,k,a){m[i]=m[i]function(){(m[i].a=m[i].a[]).push(arguments)};
   m[i].l=1*new Date();
   for (var j = 0; j < document.scripts.length; j++) {if (document.scripts[j].src === r) { return; }}
   k=e.createElement(t),a=e.getElementsByTagName(t)[0],k.async=1,k.src=r,a.parentNode.insertBefore(k,a)})
   (window, document, "script", "https://mc.yandex.ru/metrika/tag.js", "ym");

   ym(99478767, "init", {
        clickmap:true,
        trackLinks:true,
        accurateTrackBounce:true,
        webvisor:true
   });
</script>
<noscript><div><img src="https://mc.yandex.ru/watch/99478767" style="position:absolute; left:-9999px;" alt="" /></div></noscript>
<!-- /Yandex.Metrika counter -->
"""
st.markdown(hide_default_format, unsafe_allow_html=True)
st.markdown(metrika, unsafe_allow_html=True)


# Add a toggle switch for chatbot mode
sidebar()

chatbot_mode = st.sidebar.checkbox("ChatBot Mode (beta)", help="–í–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º —á–∞—Ç-–±–æ—Ç–∞ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
float_init()

# /////////////////////////////////////////////////////////////////////////////////////
# THIS IS AIMATE CHATBOT MAIN PAGE HERE:
if chatbot_mode:
    st.header("AimateChatBot")

    uploaded_files_chat, return_all_chunks_chat, option_chat, model_chat, chunk_size_input_chat, chunk_overlap_input_chat, num_chunks_chat, show_full_doc_chat = upload_and_settings()

    if not any(uploaded_file for uploaded_file in uploaded_files_chat):
        st.stop()

    files_chat = read_files_func(uploaded_files_chat)

    if sum(len(doc.page_content) for file in files_chat for doc in file.docs) > 5_000_000:
        st.warning("–í–∞—à–∏ —Ñ–∞–π–ª—ã —Å–æ–¥–µ—Ä–∂–∞—Ç —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã –ø–æ–º–µ–Ω—å—à–µ.")
        st.stop()

    chunked_files_chat = chunk_files_func(files_chat, chunk_size=chunk_size_input_chat, chunk_overlap=chunk_overlap_input_chat)

    if not any(is_file_valid(chunked_file) for chunked_file in chunked_files_chat):
        st.stop()

    if 'files' not in st.session_state:
        st.session_state.files = []

    if 'folder_index' not in st.session_state:
        st.session_state.folder_index = None

    if [file.id for file in chunked_files_chat] != st.session_state.files:
        print("Creating new folder index")
        folder_index_chat = create_folder_index(chunked_files_chat, EMBEDDING, VECTOR_STORE)
        st.success("–î–æ–∫—É–º–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!")

    else:
        print("Using existing folder index")
        folder_index_chat = st.session_state.folder_index
        st.success("–î–æ–∫—É–º–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!")

    if "messages" not in st.session_state:
        st.session_state.messages = []

    # Display chat messages from history on app rerun
    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])

    # add a button to clear chat history

    if st.session_state.messages:
        button_container = st.container()
        button_container.float("bottom: 140px; right: -725px;")
        with button_container:
            if st.button("–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", type="primary"):
                st.session_state.messages = []
                st.rerun()

    if prompt:=st.chat_input("–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º"):
        # Display user message in chat message container
        st.chat_message("user").markdown(prompt)
        # Add user message to chat history
        st.session_state.messages.append({"role": "user", "content": prompt})

        llm = get_llm(model=model_chat, temperature=0.5)

        with st.chat_message("assistant"):
            with st.spinner("–ò—â—É –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏..."):
                history = st.session_state.messages
                if len(history) > 0:
                    line = ""
                    for message in history:
                        line += message["role"] + ": " + message["content"] + "\n"
                    history = line
                else:
                    history = ""
                result = query_folder(
                    folder_index=folder_index_chat,
                    query=prompt,
                    history=history,
                    return_all=return_all_chunks_chat,
                    llm=llm,
                    num_sources=num_chunks_chat,
                )

                st.write(result.answer)
        st.session_state.messages.append({"role": "assistant", "content": result.answer})


# /////////////////////////////////////////////////////////////////////////////////////
# THIS IS AIMATE DOCS MAIN PAGE HERE:
else:
    cur_dir = os.path.dirname(os.path.abspath(__file__))
    logo_path = os.path.join(cur_dir, "aimate_symbol_cropped.png")
    st.image(logo_path, width=100)
    st.header("–£–º–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ AimateDocs")

    main_col1, main_col2 = st.columns([0.45, 0.55], gap='medium')

    with main_col2:
        with st.form(key="qa_form", border=False):
            query = st.text_area("–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º –¥–æ–∫—É–º–µ–Ω—Ç–∞–º", height=94)
            st.session_state.query = query
            submit = st.form_submit_button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å")

    with main_col1:
        uploaded_files, return_all_chunks, option, model, chunk_size_input, chunk_overlap_input, num_chunks, show_full_doc = upload_and_settings()

        if not any(uploaded_file for uploaded_file in uploaded_files):
            if submit:
                st.error("–ü—Ä–µ–∂–¥–µ —á–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã.")
            st.stop()

        files = read_files_func(uploaded_files)

        if sum(len(doc.page_content) for file in files for doc in file.docs) > 5_000_000:
            st.warning("–í–∞—à–∏ —Ñ–∞–π–ª—ã —Å–æ–¥–µ—Ä–∂–∞—Ç —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã –ø–æ–º–µ–Ω—å—à–µ.")
            st.stop()

        chunked_files = chunk_files_func(files, chunk_size=chunk_size_input, chunk_overlap=chunk_overlap_input)

        if not any(is_file_valid(chunked_file) for chunked_file in chunked_files):
            st.stop()

        if 'files' not in st.session_state:
            st.session_state.files = []

        if 'folder_index' not in st.session_state:
            st.session_state.folder_index = None

        if [file.id for file in chunked_files] != st.session_state.files:
            print("Creating new folder index")
            folder_index = create_folder_index(chunked_files, EMBEDDING, VECTOR_STORE)
            st.success("–î–æ–∫—É–º–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!")
        else:
            print("Using existing folder index")
            folder_index = st.session_state.folder_index
            st.success("–î–æ–∫—É–º–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!")

    with main_col2:
        if submit:
            if not is_query_valid(query):
                st.stop()

            answer_col, sources_col = st.columns(2)

            llm = get_llm(model=model, temperature=0)

            with st.spinner("–ò—â–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏..."):
                result = query_folder(
                    folder_index=folder_index,
                    query=query,
                    history="",
                    return_all=return_all_chunks,
                    llm=llm,
                    num_sources=num_chunks,
                )

            with answer_col:
                st.markdown("#### –û—Ç–≤–µ—Ç")
                st.markdown(result.answer)

            with sources_col:
                st.markdown("#### –ò—Å—Ç–æ—á–Ω–∏–∫–∏")
                for source in result.sources:
                    st.markdown(source.page_content)
                    st.markdown(source.metadata["source"])
                    st.markdown("---")