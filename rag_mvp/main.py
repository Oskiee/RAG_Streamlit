import streamlit as st
from dotenv import load_dotenv
import os
import getpass

from components.sidebar import sidebar
from ui import (
    wrap_doc_in_html,
    is_query_valid,
    is_file_valid,
    display_file_read_error,
)
from core.caching import bootstrap_caching
from core.parsing import read_file
from core.chunking import chunk_file
from core.embedding import embed_files
from core.qa import query_folder
from core.utils import get_llm

load_dotenv()

EMBEDDING = "mistral"
EMBED_MODEL = "mistral-embed"
VECTOR_STORE = "faiss"
MODEL_LIST = ["mistral-large-latest", "mistral-small-latest"]

if "MISTRAL_API_KEY" not in os.environ:
    os.environ["MISTRAL_API_KEY"] = getpass.getpass("Enter your Mistral API key: ")

st.set_page_config(page_title="RAG_MVP", page_icon="üîç", layout="wide")
# Remove whitespace from the top of the page and sidebar
st.markdown("""
        <style>
               .block-container {
                    padding-top: 2rem;
                    padding-bottom: 5rem;
                    padding-left: 5rem;
                    padding-right: 5rem;
                }
        </style>
        """, unsafe_allow_html=True)
hide_default_format = """
       <style>
       #MainMenu {visibility: hidden; }
       footer {visibility: hidden;}
       </style>
       """
st.markdown(hide_default_format, unsafe_allow_html=True)

# Load the local image file
cur_dir = os.path.dirname(os.path.abspath(__file__))
logo_path = os.path.join(cur_dir, "aimate_symbol_cropped.png")
st.image(logo_path, width=100)
st.header("–£–º–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ AimateDocs")

# Create two columns
# col1, col2 = st.columns([0.57, 0.43], vertical_alignment="center")
#
# with col1:
#     st.header("–£–º–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ AimateDocs")
#
# with col2:
#     st.image(logo_path, width=150)

# Enable caching for expensive functions
# bootstrap_caching()

sidebar()

main_col1, main_col2 = st.columns([0.45, 0.55], gap='medium')

with main_col2:
    # st.markdown("#### –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å")
    with st.form(key="qa_form", border=False):
        query = st.text_area("–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º –¥–æ–∫—É–º–µ–Ω—Ç–∞–º", height=94)
        st.session_state.query = query
        submit = st.form_submit_button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å")


with main_col1:
    # st.markdown("#### –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã")
    uploaded_files = st.file_uploader(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã",
        type=["pdf", "docx", "txt", "xlsx", "pptx"],
        help="–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è.",
        accept_multiple_files=True,
    )

    MAX_LINES = 100

    if len(uploaded_files) > MAX_LINES:
        st.warning(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤. –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ {MAX_LINES} –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.")
        multiple_files = uploaded_files[:MAX_LINES]

    with st.expander("–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"):
        return_all_chunks = st.checkbox("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏", help="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—Å–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –∏–∑ –≤–∞—à–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞.")

        option = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞",
            ["–ü–æ–∏—Å–∫ —Å–º—ã—Å–ª–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –≤—ã—è–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π", "–ü–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –∞–Ω–∞–ª–∏–∑ —Ñ–∞–∫—Ç–æ–≤/–¥–∞–Ω–Ω—ã—Ö"],
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞",
            help="–ü–æ–∏—Å–∫ —Å–º—ã—Å–ª–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª–µ–∑–µ–Ω, –∫–æ–≥–¥–∞ –≤–∞–º –Ω—É–∂–Ω–æ –ø–æ–Ω—è—Ç—å, –æ —á–µ–º –∏–¥–µ—Ç —Ä–µ—á—å –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö. –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª–µ–∑–µ–Ω, –∫–æ–≥–¥–∞ –≤–∞–º –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö.",
        )

        model_option = st.selectbox(
            "–ú–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞",
            options=["–ë–æ–ª—å—à–∞—è –º–æ–¥–µ–ª—å (—Ç–æ—á–Ω–µ–µ –æ—Ç–≤–µ—Ç—ã)", "–ú–∞–ª–µ–Ω—å–∫–∞—è –º–æ–¥–µ–ª—å (–±—ã—Å—Ç—Ä–µ–µ)"],
            help="–ë–æ–ª—å—à–∞—è –º–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã, –Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –º–µ–¥–ª–µ–Ω–Ω–µ–µ. –ú–∞–ª–µ–Ω—å–∫–∞—è –º–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–µ–Ω–µ–µ —Ç–æ—á–Ω—ã–µ –∏ –∫—Ä–∞—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã, –Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –±—ã—Å—Ç—Ä–µ–µ.",
        )

        if model_option == "–ë–æ–ª—å—à–∞—è –º–æ–¥–µ–ª—å (—Ç–æ—á–Ω–µ–µ –æ—Ç–≤–µ—Ç—ã)":
            model = MODEL_LIST[0]
        elif model_option == "–ú–∞–ª–µ–Ω—å–∫–∞—è –º–æ–¥–µ–ª—å (–±—ã—Å—Ç—Ä–µ–µ)":
            model = MODEL_LIST[1]
        else:
            model = MODEL_LIST[0]

        if option == "–ü–æ–∏—Å–∫ —Å–º—ã—Å–ª–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –≤—ã—è–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π":
            chunk_size_input = 1000
            chunk_overlap_input = 400
            num_chunks = 5
        elif option == "–ü–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –∞–Ω–∞–ª–∏–∑ —Ñ–∞–∫—Ç–æ–≤/–¥–∞–Ω–Ω—ã—Ö":
            chunk_size_input = 500
            chunk_overlap_input = 100
            num_chunks = 10
        else:
            chunk_size_input = 1000
            chunk_overlap_input = 400
            num_chunks = 5

        show_full_doc = False

    if not any(uploaded_file for uploaded_file in uploaded_files):
        if submit:
            st.error("–ü—Ä–µ–∂–¥–µ —á–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã.")
        st.stop()

    def read_files_func(uploaded_files_var):
        files_local = []
        for file in uploaded_files_var:
            try:
                files_local.append(read_file(file))
            except Exception as e:
                display_file_read_error(e, file_name=file.name)
        return files_local

    files = read_files_func(uploaded_files)

    if sum(len(doc.page_content) for file in files for doc in file.docs) > 1_596_007:
        st.warning("–í–∞—à–∏ —Ñ–∞–π–ª—ã —Å–æ–¥–µ—Ä–∂–∞—Ç —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã –ø–æ–º–µ–Ω—å—à–µ.")
        st.stop()

    def chunk_files_func(files_var, chunk_size, chunk_overlap):
        chunked_files_local = []
        for file in files_var:
            chunked_file = chunk_file(file, chunk_size=chunk_size, chunk_overlap=chunk_overlap)
            chunked_files_local.append(chunked_file)
        return chunked_files_local

    chunked_files = chunk_files_func(files, chunk_size=chunk_size_input, chunk_overlap=chunk_overlap_input)

    if not any(is_file_valid(chunked_file) for chunked_file in chunked_files):
        st.stop()

    if 'files' not in st.session_state:
        st.session_state.files = []

    if 'folder_index' not in st.session_state:
        st.session_state.folder_index = None

    # @st.cache_resource(show_spinner=False, ttl="8h")
    def create_folder_index(files_var, embedding, vector_store):
        with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è‚è≥"):
            try:
                folder_index_local = embed_files(
                    files=files_var,
                    embedding=embedding,
                    vector_store=vector_store,
                    model=EMBED_MODEL,
                )
            except Exception as e:
                st.error(f"–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –í–µ—Ä–æ—è—Ç–Ω–æ, –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —É–¥–∞–ª–∏—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–∏–µ.")
                print("!!!–í–û–ó–ù–ò–ö–õ–ê –û–®–ò–ë–ö–ê –ü–†–ò –ò–ù–î–ï–ö–°–ê–¶–ò–ò!!!\n–û–®–ò–ë–ö–ê:", e)
                folder_index_local = None

        if folder_index_local is None:
            st.stop()
        st.session_state.files = [file.id for file in files_var]
        st.session_state.folder_index = folder_index_local
        return folder_index_local

    if [file.id for file in chunked_files] != st.session_state.files:
        print("Creating new folder index")
        folder_index = create_folder_index(chunked_files, EMBEDDING, VECTOR_STORE)
        st.success("–î–æ–∫—É–º–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!")
    else:
        print("Using existing folder index")
        folder_index = st.session_state.folder_index
        st.success("–î–æ–∫—É–º–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!")

    # folder_index = create_folder_index(chunked_files, EMBEDDING, VECTOR_STORE)

with main_col2:
    if submit:
        if not is_query_valid(query):
            st.stop()

        answer_col, sources_col = st.columns(2)

        llm = get_llm(model=model, temperature=0)

        with st.spinner("–ò—â–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏..."):
            result = query_folder(
                folder_index=folder_index,
                query=query,
                return_all=return_all_chunks,
                llm=llm,
                num_sources=num_chunks,
            )

        with answer_col:
            st.markdown("#### –û—Ç–≤–µ—Ç")
            st.markdown(result.answer)

        with sources_col:
            st.markdown("#### –ò—Å—Ç–æ—á–Ω–∏–∫–∏")
            for source in result.sources:
                st.markdown(source.page_content)
                st.markdown(source.metadata["source"])
                st.markdown("---")