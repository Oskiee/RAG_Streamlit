import streamlit as st
from dotenv import load_dotenv
import pprint
import os
import getpass

from gitdb.fun import chunk_size

from rag_mvp.components.sidebar import sidebar

from ui import (
    wrap_doc_in_html,
    is_query_valid,
    is_file_valid,
    is_open_ai_key_valid,
    display_file_read_error,
)

from rag_mvp.core.caching import bootstrap_caching

from rag_mvp.core.parsing import read_file
from rag_mvp.core.chunking import chunk_file
from rag_mvp.core.embedding import embed_files
from rag_mvp.core.qa import query_folder
from rag_mvp.core.utils import get_llm


load_dotenv()

EMBEDDING = "openai"
VECTOR_STORE = "faiss"
MODEL_LIST = ["mistral-large-latest"]


if "MISTRAL_API_KEY" not in os.environ:
    os.environ["MISTRAL_API_KEY"] = getpass.getpass("Enter your Mistral API key: ")


st.set_page_config(page_title="RAG_MVP", page_icon="üîç", layout="wide")
st.header("üîç–£–º–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏")

# Enable caching for expensive functions
bootstrap_caching()

sidebar()


uploaded_files = st.file_uploader(
    "–ó–∞–≥—Ä—É–∑–∏—Ç–µ pdf, docx, –∏–ª–∏ txt —Ñ–∞–π–ª",
    type=["pdf", "docx", "txt"],
    help="–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è.",
    accept_multiple_files=True,
)

model: str = st.selectbox("–ú–æ–¥–µ–ª—å", options=MODEL_LIST)  # type: ignore

with st.expander("–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏"):
    return_all_chunks = st.checkbox("–ü–æ–∫–∞–∑–≤–∞—Ç—å –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –±–ª–æ–∫–∏, –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –≤–µ–∫—Ç–æ—Ä–Ω—ã–º –ø–æ–∏—Å–∫–æ–º")
    chunk_size_input = st.text_input(
        "–†–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –±–ª–æ–∫–∞ (–≤ —Å–∏–º–≤–æ–ª–∞—Ö)",
        type="default",
        placeholder="–ù–∞–ø–∏—à–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –±–ª–æ–∫–∞",
        help="–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ—Ç 100 –¥–æ 2000 —Å–∏–º–≤–æ–ª–æ–≤",
        value=1024,
    )
    chunk_overlap_input = st.text_input(
        "–ù–∞–ª–æ–∂–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤ (–≤ —Å–∏–º–≤–æ–ª–∞—Ö)",
        type="default",
        placeholder="–ù–∞–ø–∏—à–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –±–ª–æ–∫–æ–≤",
        help="–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ—Ç 0 –¥–æ 1500 —Å–∏–º–≤–æ–ª–æ–≤",
        value=400,
    )
    chunk_size_input = int(chunk_size_input)
    chunk_overlap_input = int(chunk_overlap_input)
    # show_full_doc = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
    show_full_doc = False


if not any(uploaded_file for uploaded_file in uploaded_files):
    st.stop()

if not (100 <= chunk_size_input <= 2000 and 0 <= chunk_overlap_input <= 1500):
    st.stop()

files = []
for file in uploaded_files:
    try:
        files.append(read_file(file))
    except Exception as e:
        display_file_read_error(e, file_name=file.name)

if not chunk_size_input:
    chunk_size_input = 1024

if not chunk_overlap_input:
    chunk_overlap_input = 400

chunked_files = []
for file in files:
    chunked_files.append(chunk_file(file, chunk_size=1024, chunk_overlap=400))

if not any(is_file_valid(chunked_file) for chunked_file in chunked_files):
    st.stop()


# if 'clicked' not in st.session_state:
#     st.session_state.clicked = False
#
# if not any(uploaded_file for uploaded_file in uploaded_files):
#     st.session_state.clicked = False
#
# def click_button():
#     st.session_state.clicked = True
#
# st.button('–ù–∞—á–∞—Ç—å –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é', on_click=click_button)

with st.spinner("–ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è‚è≥"):
    folder_index = embed_files(
        files=chunked_files,
        embedding=EMBEDDING if model != "debug" else "debug",
        vector_store=VECTOR_STORE if model != "debug" else "debug",
    )

with st.form(key="qa_form"):
    query = st.text_area("–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç—É")
    submit = st.form_submit_button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å")


if show_full_doc:
    with st.expander("Document"):
        # Hack to get around st.markdown rendering LaTeX
        st.markdown(f"<p>{wrap_doc_in_html(file.docs)}</p>", unsafe_allow_html=True)


if submit:
    if not is_query_valid(query):
        st.stop()

    # Output Columns
    answer_col, sources_col = st.columns(2)

    llm = get_llm(model=model, temperature=0)
    result = query_folder(
        folder_index=folder_index,
        query=query,
        return_all=return_all_chunks,
        llm=llm,
    )

    with answer_col:
        st.markdown("#### –û—Ç–≤–µ—Ç")
        st.markdown(result.answer)

    with sources_col:
        st.markdown("#### –ò—Å—Ç–æ—á–Ω–∏–∫–∏")
        for source in result.sources:
            st.markdown(source.page_content)
            st.markdown(source.metadata["source"])
            st.markdown("---")
